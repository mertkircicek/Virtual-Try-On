import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
from utils.points_selector import select_points
from warp import warp_cloth_from_points
import segment
import os
import cv2

class VirtualTryOnApp:
    def __init__(self, root):
        self.root = root
        self.root.title("TARVÄ°NA - Virtual Try-On UygulamasÄ±")
        self.root.geometry("900x800")  # Pencere boyutunu kÃ¼Ã§Ã¼lttÃ¼m
        self.root.configure(bg="#065b65")  
        
        style = ttk.Style()
        style.configure("Title.TLabel", 
                       font=("Helvetica", 28, "bold"), 
                       foreground="#1a1a1a")  
        style.configure("Subtitle.TLabel", 
                       font=("Helvetica", 12), 
                       foreground="#404040")  
        style.configure("Frame.TFrame", 
                       background="#ffffff", 
                       relief="solid", 
                       borderwidth=1)
        style.configure("Accent.TButton", 
                       font=("Helvetica", 10, "bold"),
                       padding=15,
                       background="#e71414",  
                       foreground="white")
        style.configure("Primary.TButton", 
                       font=("Helvetica", 12, "bold"),
                       padding=15,
                       background="#27ae60",  
                       foreground="white")
        style.configure("Secondary.TButton", 
                       font=("Helvetica", 10, "bold"),
                       padding=15,
                       foreground="white")
        style.configure("Info.TLabel", 
                       font=("Helvetica", 10, "bold"),
                       foreground="#2c3e50")
        
        # Ana kÄ±sÄ±m
        main_frame = ttk.Frame(root, padding="30", style="Frame.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # BaÅŸlÄ±k 
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 30))
        
        title_label = ttk.Label(
            title_frame, 
            text="ğŸ‘• Virtual Try-On", 
            style="Title.TLabel"
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            title_frame,
            text="TiÅŸÃ¶rtÃ¼nÃ¼zÃ¼ sanal olarak deneyin",
            style="Subtitle.TLabel"
        )
        subtitle_label.pack(pady=(5, 0))
        
        # TiÅŸÃ¶rt seÃ§im kÄ±smÄ±
        cloth_frame = ttk.LabelFrame(
            main_frame, 
            text="TiÅŸÃ¶rt SeÃ§imi", 
            padding="20",
            style="Frame.TFrame"
        )
        cloth_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.cloth_path = None
        self.person_path = None
        self.last_output_path = None
        self.output_window = None
        
        # TiÅŸÃ¶rt butonlarÄ±
        cloth_buttons_frame = ttk.Frame(cloth_frame)
        cloth_buttons_frame.pack(fill=tk.X, pady=10)
        
        tk.Button(
            cloth_buttons_frame,
            text="TiÅŸÃ¶rt 1",
            command=lambda: self.set_cloth("data/cloth1.png"),
            font=("Helvetica", 10, "bold"),
            bg="#594bd8",  
            fg="white",
            padx=15,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            cloth_buttons_frame,
            text="TiÅŸÃ¶rt 2",
            command=lambda: self.set_cloth("data/cloth2.png"),
            font=("Helvetica", 10, "bold"),
            bg="#594bd8",  
            fg="white",
            padx=15,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        ).pack(side=tk.LEFT, padx=10)
        
        # KiÅŸi seÃ§im kÄ±smÄ±
        person_frame = ttk.LabelFrame(
            main_frame, 
            text="KiÅŸi SeÃ§imi", 
            padding="20",
            style="Frame.TFrame"
        )
        person_frame.pack(fill=tk.X, pady=(0, 20))
        
        # KiÅŸi butonlarÄ±
        person_buttons_frame = ttk.Frame(person_frame)
        person_buttons_frame.pack(fill=tk.X, pady=10)
        
        tk.Button(
            person_buttons_frame,
            text="KiÅŸi 1",
            command=lambda: self.set_person("data/person1.jpg"),
            font=("Helvetica", 10, "bold"),
            bg="#594bd8",  
            fg="white",
            padx=15,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            person_buttons_frame,
            text="KiÅŸi 2",
            command=lambda: self.set_person("data/person2.jpg"),
            font=("Helvetica", 10, "bold"),
            bg="#594bd8",  
            fg="white",
            padx=15,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        ).pack(side=tk.LEFT, padx=10)
        
        # Ä°ÅŸlem butonlarÄ± kÄ±smÄ±
        action_frame = ttk.Frame(main_frame, style="Frame.TFrame")
        action_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Ana iÅŸlem butonu
        tk.Button(
            action_frame,
            text="ğŸ“Œ NoktalarÄ± SeÃ§ ve Giydir",
            command=self.run_tryon,
            font=("Helvetica", 12, "bold"),
            bg="#27ae60",  
            fg="white",
            padx=15,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        ).pack(fill=tk.X, pady=20, padx=20)
        
        # SeÃ§ilen dosya bilgileri
        self.cloth_info = ttk.Label(
            cloth_frame, 
            text="HenÃ¼z tiÅŸÃ¶rt seÃ§ilmedi",
            style="Info.TLabel"
        )
        self.cloth_info.pack(pady=10)
        
        self.person_info = ttk.Label(
            person_frame, 
            text="HenÃ¼z kiÅŸi seÃ§ilmedi",
            style="Info.TLabel"
        )
        self.person_info.pack(pady=10)
        
        # Durum Ã§ubuÄŸu
        self.status_var = tk.StringVar()
        self.status_var.set("HazÄ±r")
        status_bar = ttk.Label(
            root, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            padding="10",
            font=("Helvetica", 9, "bold"),  
            foreground="#1a1a1a"  
        )
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

    def set_cloth(self, path):
        if not os.path.exists(path):
            messagebox.showerror("Hata", f"TiÅŸÃ¶rt dosyasÄ± bulunamadÄ±: {path}")
            return
        self.cloth_path = path
        self.cloth_info.config(text=f"SeÃ§ilen fotoÄŸraf: {os.path.basename(path)}")
        self.status_var.set(f"TiÅŸÃ¶rt seÃ§ildi: {os.path.basename(path)}")
        print(f"[INFO] SeÃ§ilen fotoÄŸraf: {path}")

    def set_person(self, path):
        if not os.path.exists(path):
            messagebox.showerror("Hata", f"KiÅŸi gÃ¶rseli bulunamadÄ±: {path}")
            return
        self.person_path = path
        self.person_info.config(text=f"SeÃ§ilen fotoÄŸraf: {os.path.basename(path)}")
        self.status_var.set(f"KiÅŸi seÃ§ildi: {os.path.basename(path)}")
        print(f"[INFO] SeÃ§ilen fotoÄŸraf: {path}")

    def run_tryon(self):
        if not self.cloth_path or not self.person_path:
            messagebox.showwarning("UyarÄ±", "LÃ¼tfen hem tiÅŸÃ¶rt hem kiÅŸi gÃ¶rseli seÃ§in.")
            return

        self.status_var.set("Ä°ÅŸlem baÅŸlatÄ±lÄ±yor...")
        self.root.update()

        print(f"[DEBUG] SeÃ§ilen tiÅŸÃ¶rt: {self.cloth_path}")
        print(f"[DEBUG] SeÃ§ilen kiÅŸi: {self.person_path}")

        if not os.path.exists(self.cloth_path):
            messagebox.showerror("Hata", f"TiÅŸÃ¶rt dosyasÄ± bulunamadÄ±: {self.cloth_path}")
            return
        if not os.path.exists(self.person_path):
            messagebox.showerror("Hata", f"KiÅŸi gÃ¶rseli bulunamadÄ±: {self.person_path}")
            return

        # KiÅŸi gÃ¶rselini tiÅŸÃ¶rt gÃ¶rselinin geniÅŸliÄŸine gÃ¶re yeniden boyutlandÄ±rma yapmak iÃ§in;
        try:
            cloth_img = cv2.imread(self.cloth_path, cv2.IMREAD_UNCHANGED) # Alpha kanalÄ±nÄ± da okumak iÃ§in UNCHANGED
            person_img = cv2.imread(self.person_path)

            if cloth_img is None:
                 raise FileNotFoundError(f"TiÅŸÃ¶rt gÃ¶rseli yÃ¼klenemedi: {self.cloth_path}")
            if person_img is None:
                 raise FileNotFoundError(f"KiÅŸi gÃ¶rseli yÃ¼klenemedi: {self.person_path}")

            new_width = cloth_img.shape[1]
            aspect_ratio = person_img.shape[0] / person_img.shape[1]
            new_height = int(new_width * aspect_ratio)
            
            resized_person_img = cv2.resize(person_img, (new_width, new_height), interpolation=cv2.INTER_AREA)
            resized_person_path = "output/resized_person.jpg"
            cv2.imwrite(resized_person_path, resized_person_img)
            print(f"[DEBUG] KiÅŸi gÃ¶rseli yeniden boyutlandÄ±rÄ±ldÄ± ve kaydedildi: {resized_person_path}")
            
            current_person_path = resized_person_path

        except Exception as e:
            print(f"[ERROR] KiÅŸi gÃ¶rselini yeniden boyutlandÄ±rma hatasÄ±: {str(e)}")
            messagebox.showerror("Hata", f"KiÅŸi gÃ¶rselini yeniden boyutlandÄ±rma hatasÄ±: {str(e)}")
            return

        # Eski Ã§Ä±ktÄ±larÄ± temizlemek iÃ§in;
        output_dir = "output"
        if os.path.exists(output_dir):
            for file in os.listdir(output_dir):
                if file.startswith("warped_") and file.endswith(".png"):
                    try:
                        os.remove(os.path.join(output_dir, file))
                    except:
                        pass

        print("[INFO] Segmentasyon baÅŸlatÄ±lÄ±yor...")
        print(f"[DEBUG] Segmentasyon iÃ§in kullanÄ±lan kiÅŸi gÃ¶rseli: {current_person_path}")
        segment.run_segmentation(input_path=current_person_path)

        # Segmentasyon sonrasÄ± mask.png'nin varlÄ±ÄŸÄ±nÄ± kontrol etmek iÃ§in;
        mask_path = "output/mask.png"
        if not os.path.exists(mask_path):
            messagebox.showerror("Hata", "Segmentasyon maskesi oluÅŸturulamadÄ±.")
            return
        print(f"[DEBUG] Segmentasyon maskesi oluÅŸturuldu: {mask_path}")

        # YÃ¼z tespiti yapmak ve maskeden Ã§Ä±karÄ±lmasÄ± iÃ§in;
        try:
            # Cascade dosyasÄ±nÄ±n uygulamanÄ±n Ã§alÄ±ÅŸtÄ±ÄŸÄ± dizine gÃ¶receli yolu
            cascade_name = 'haarcascade_frontalface_default.xml'
            # 'data' klasÃ¶rÃ¼ iÃ§inde aranacak
            cascade_path = os.path.join("data", cascade_name)

            print(f"[DEBUG] Cascade dosyasÄ± yolu: {cascade_path}")

            if not os.path.exists(cascade_path):
                 # data klasÃ¶rÃ¼nde yoksa, opencv-contrib-python paketinin yÃ¼klÃ¼ olduÄŸu yerden bulmaya Ã§alÄ±ÅŸÄ±r
                try:
                    # opencv-contrib-python paketinin data yolunu bul
                    import site
                    opencv_contrib_path = next(s for s in site.getsitepackages() if 'opencv_contrib_python' in s)
                    alt_cascade_path = os.path.join(opencv_contrib_path, 'cv2', 'data', cascade_name)
                    if os.path.exists(alt_cascade_path):
                        cascade_path = alt_cascade_path
                        print(f"[DEBUG] Alternatif cascade dosyasÄ± yolu bulundu: {cascade_path}")
                    else:
                         raise FileNotFoundError(f"Cascade dosyasÄ± bulunamadÄ±: {cascade_path} veya {alt_cascade_path}")
                except Exception as e:
                    raise FileNotFoundError(f"Cascade dosyasÄ± bulunamadÄ± ve alternatif yol bulunamadÄ±: {e}")


            face_cascade = cv2.CascadeClassifier(cascade_path)
            mask_img = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            person_img_resized_gray = cv2.imread(current_person_path, cv2.IMREAD_GRAYSCALE) # YÃ¼z tespiti iÃ§in gri tonlama

            if mask_img is None:
                 raise Exception(f"Maske gÃ¶rseli yÃ¼klenemedi: {mask_path}")
            if person_img_resized_gray is None:
                 raise Exception(f"Yeniden boyutlandÄ±rÄ±lmÄ±ÅŸ kiÅŸi gÃ¶rseli gri tonlama yÃ¼klenemedi: {current_person_path}")

            faces = face_cascade.detectMultiScale(person_img_resized_gray, 1.1, 4)
            print(f"[DEBUG] Tespit edilen yÃ¼z sayÄ±sÄ±: {len(faces)}")

            # YÃ¼z bÃ¶lgesini daha geniÅŸ bir alan olarak iÅŸaretleyerek ayrÄ±mÄ± kolaylaÅŸtÄ±rdÄ±m
            for (x, y, w, h) in faces:
                # YÃ¼z bÃ¶lgesini daha geniÅŸ bir alan olarak iÅŸaretlemek iÃ§in;
                padding_x = int(w * 0.3)  # YÃ¼z geniÅŸliÄŸinin %30'u kadar yatay boÅŸluk
                padding_y = int(h * 0.4)  # YÃ¼z yÃ¼ksekliÄŸinin %40'Ä± kadar dikey boÅŸluk
                
                # YÃ¼z bÃ¶lgesini geniÅŸletmek ve sÄ±nÄ±rlarÄ± kontrol etmek iÃ§in;
                start_y = max(0, y - padding_y)
                end_y = min(mask_img.shape[0], y + h + padding_y)
                start_x = max(0, x - padding_x)
                end_x = min(mask_img.shape[1], x + w + padding_x)

                # YÃ¼z bÃ¶lgesini maskede siyaha boyar
                mask_img[start_y:end_y, start_x:end_x] = 0
                
                # YÃ¼z bÃ¶lgesinin etrafÄ±na yumuÅŸak geÃ§iÅŸ ekler
                feather_size = 20
                for i in range(feather_size):
                    alpha = i / feather_size
                    # Ãœst kenar
                    if start_y - i >= 0:
                        mask_img[start_y - i, start_x:end_x] = int(255 * alpha)
                    # Alt kenar
                    if end_y + i < mask_img.shape[0]:
                        mask_img[end_y + i, start_x:end_x] = int(255 * alpha)
                    # Sol kenar
                    if start_x - i >= 0:
                        mask_img[start_y:end_y, start_x - i] = int(255 * alpha)
                    # SaÄŸ kenar
                    if end_x + i < mask_img.shape[1]:
                        mask_img[start_y:end_y, end_x + i] = int(255 * alpha)

                print(f"[DEBUG] Maskeden yÃ¼z bÃ¶lgesi Ã§Ä±karÄ±ldÄ± (geniÅŸletilmiÅŸ ve yumuÅŸatÄ±lmÄ±ÅŸ): ({start_x}, {start_y}, {end_x-start_x}, {end_y-start_y})")

            cv2.imwrite(mask_path, mask_img)
            print(f"[DEBUG] DÃ¼zenlenmiÅŸ maske kaydedildi: {mask_path}")

        except Exception as e:
            print(f"[ERROR] YÃ¼z tespiti ve maske dÃ¼zenleme hatasÄ±: {str(e)}")
            self.status_var.set("YÃ¼z tespiti hatasÄ±!")
            messagebox.showwarning("UyarÄ±", f"YÃ¼z tespiti veya maske dÃ¼zenleme sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}\nYine de devam ediliyor...")
            # Hata olsa bile maskenin mevcut haliyle devam eder

        self.status_var.set("Noktalar seÃ§iliyor...")
        self.root.update()
        messagebox.showinfo("Nokta SeÃ§imi", "TiÅŸÃ¶rt Ã¼zerinde sÄ±rasÄ±yla ÅŸu noktalarÄ± seÃ§in (SeÃ§imlerinizi mÃ¼mkÃ¼n olduÄŸu kadar birbirinden uzakta ve belirtilen bÃ¶lgelerde yapÄ±n.):\n1. Sol omuz\n2. SaÄŸ omuz\n3. Bel ortasÄ±")
        print("[INFO] TiÅŸÃ¶rt Ã¼zerindeki noktalarÄ± seÃ§in")
        src_points = select_points(self.cloth_path, title="TiÅŸÃ¶rt")
        cv2.destroyAllWindows() # Nokta seÃ§imi pencerelerini kapatÄ±r
        cv2.waitKey(1) # Pencerenin kapanmasÄ± iÃ§in kÄ±sa bekleme sÃ¼resi
        messagebox.showinfo("Bilgi", "TiÅŸÃ¶rt Ã¼zerindeki noktalar seÃ§ildi!")

        self.status_var.set("Noktalar seÃ§iliyor...")
        self.root.update()
        messagebox.showinfo("Nokta SeÃ§imi", "KiÅŸi Ã¼zerinde sÄ±rasÄ±yla ÅŸu noktalarÄ± seÃ§in (SeÃ§imlerinizi mÃ¼mkÃ¼n olduÄŸu kadar birbirinden uzakta ve belirtilen bÃ¶lgelerde yapÄ±n.):\n1. Sol omuz\n2. SaÄŸ omuz\n3. Bel ortasÄ±")
        print("[INFO] KiÅŸi Ã¼zerindeki noktalarÄ± seÃ§in")
        dst_points = select_points(current_person_path, title="KiÅŸi")
        cv2.destroyAllWindows() # Nokta seÃ§imi pencerelerini kapatÄ±r
        cv2.waitKey(1) # Pencerenin kapanmasÄ± iÃ§in kÄ±sa bekleme sÃ¼resi
        messagebox.showinfo("Bilgi", "KiÅŸi Ã¼zerindeki noktalar seÃ§ildi!")

        # NoktalarÄ±n sÄ±rasÄ±nÄ± kontrol etmek iÃ§in;
        if not self.validate_points(src_points, dst_points):
            messagebox.showerror("Hata", "Noktalar yanlÄ±ÅŸ sÄ±rada seÃ§ildi. LÃ¼tfen tekrar deneyin.")
            self.status_var.set("Hata: YanlÄ±ÅŸ nokta sÄ±rasÄ±.")
            return

        os.makedirs("output", exist_ok=True)
        output_name = f"output/warped_{os.path.splitext(os.path.basename(self.cloth_path))[0]}_{os.path.splitext(os.path.basename(current_person_path))[0]}.png"
        print(f"[DEBUG] Ã‡Ä±ktÄ± dosyasÄ±: {output_name}")

        print(f"[DEBUG] Warp iÅŸlemi baÅŸlatÄ±lÄ±yor...")
        print(f"[DEBUG] TiÅŸÃ¶rt: {self.cloth_path}")
        print(f"[DEBUG] KiÅŸi: {current_person_path}")
        print(f"[DEBUG] Mask: {mask_path}")

        self.status_var.set("Giydirme iÅŸlemi yapÄ±lÄ±yor...")
        self.root.update()

        try:
            # Warp iÅŸlemini gerÃ§ekleÅŸtir (Affine transformasyon kullanÄ±lÄ±yor)
            success = warp_cloth_from_points(self.cloth_path, current_person_path, output_name, src_points, dst_points)

            if not success:
                raise Exception("Warp iÅŸlemi baÅŸarÄ±sÄ±z oldu veya boÅŸ gÃ¶rsel dÃ¶ndÃ¼rdÃ¼")

            # Ã‡Ä±ktÄ± dosyasÄ±nÄ±n oluÅŸturulduÄŸunu kontrol et
            if not os.path.exists(output_name) or os.stat(output_name).st_size == 0:
                raise Exception("Ã‡Ä±ktÄ± dosyasÄ± oluÅŸturulamadÄ± veya boÅŸ.")

            self.last_output_path = output_name
            self.status_var.set("Ä°ÅŸlem tamamlandÄ±!")
            messagebox.showinfo("BaÅŸarÄ±lÄ±", "TiÅŸÃ¶rt baÅŸarÄ±yla giydirildi!")

            # BaÅŸarÄ±lÄ± olursa Ã§Ä±ktÄ±yÄ± gÃ¶stermek iÃ§in;
            self.show_output(output_name)

        except Exception as e:
            print(f"[ERROR] Warp iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")
            self.status_var.set("Hata oluÅŸtu!")
            messagebox.showerror("Hata", f"TiÅŸÃ¶rt giydirme iÅŸlemi baÅŸarÄ±sÄ±z oldu: {str(e)}")
            return

        # cv2.destroyAllWindows() # Nokta seÃ§imi dÄ±ÅŸÄ±ndaki pencereler kapatÄ±lmamalÄ±
        # cv2.destroyAllWindows()

    def validate_points(self, src_points, dst_points):
        # Nokta sayÄ±sÄ± kontrolÃ¼ (her iki listede de 3 nokta olmalÄ±)
        if len(src_points) != 3 or len(dst_points) != 3:
            print("[DEBUG] Hata: Nokta sayÄ±sÄ± yanlÄ±ÅŸ")
            return False

        # Sol omuz saÄŸ omuzdan daha solda olmalÄ±
        if src_points[0][0] > src_points[1][0] or dst_points[0][0] > dst_points[1][0]:
            print("[DEBUG] Hata: Sol omuz saÄŸ omuzdan daha saÄŸda")
            return False

        # Omuz noktalarÄ± arasÄ±ndaki mesafe kontrolÃ¼
        src_shoulder_distance = abs(src_points[0][0] - src_points[1][0])
        dst_shoulder_distance = abs(dst_points[0][0] - dst_points[1][0])
        
        # Omuz noktalarÄ± arasÄ±ndaki mesafe Ã§ok yakÄ±n veya Ã§ok uzak olmamalÄ±
        min_shoulder_distance = 50  # minimum omuz mesafesi
        if src_shoulder_distance < min_shoulder_distance or dst_shoulder_distance < min_shoulder_distance:
            print("[DEBUG] Hata: Omuz noktalarÄ± birbirine Ã§ok yakÄ±n")
            return False

        # Bel noktasÄ± kontrolÃ¼
        # Bel noktasÄ± omuz noktalarÄ±nÄ±n altÄ±nda olmalÄ±
        if src_points[2][1] < max(src_points[0][1], src_points[1][1]) or \
           dst_points[2][1] < max(dst_points[0][1], dst_points[1][1]):
            print("[DEBUG] Hata: Bel noktasÄ± omuz noktalarÄ±nÄ±n Ã¼stÃ¼nde")
            return False

        # Bel noktasÄ± omuz noktalarÄ±ndan Ã§ok uzakta olmamalÄ±
        max_vertical_distance = 300  # maksimum dikey mesafe
        if abs(src_points[2][1] - max(src_points[0][1], src_points[1][1])) > max_vertical_distance or \
           abs(dst_points[2][1] - max(dst_points[0][1], dst_points[1][1])) > max_vertical_distance:
            print("[DEBUG] Hata: Bel noktasÄ± omuz noktalarÄ±ndan Ã§ok uzakta")
            return False

        # Bel noktasÄ± omuz noktalarÄ±nÄ±n orta noktasÄ±na yakÄ±n olmalÄ± (yatay)
        src_shoulder_mid = (src_points[0][0] + src_points[1][0]) / 2
        dst_shoulder_mid = (dst_points[0][0] + dst_points[1][0]) / 2
        
        max_horizontal_offset = 50  # maksimum yatay sapma
        if abs(src_points[2][0] - src_shoulder_mid) > max_horizontal_offset or \
           abs(dst_points[2][0] - dst_shoulder_mid) > max_horizontal_offset:
            print("[DEBUG] Hata: Bel noktasÄ± omuzlarÄ±n orta noktasÄ±ndan Ã§ok uzakta")
            return False

        return True

    def show_output(self, output_path=None):
        print(f"[DEBUG] show_output Ã§aÄŸrÄ±ldÄ±, output_path: {output_path}")
        if output_path is None:
            output_dir = "output"
            print(f"[DEBUG] show_output parametresiz Ã§aÄŸrÄ±ldÄ±. Ã‡Ä±ktÄ± dizini aranÄ±yor: {output_dir}")
            if not os.path.exists(output_dir):
                messagebox.showerror("Hata", "HenÃ¼z Ã§Ä±ktÄ± bulunamadÄ±.")
                print(f"[DEBUG] Ã‡Ä±ktÄ± dizini bulunamadÄ±: {output_dir}")
                return
            warped_files = [f for f in os.listdir(output_dir) if f.startswith("warped_") and f.endswith(".png")]
            if not warped_files:
                messagebox.showerror("Hata", "HenÃ¼z Ã§Ä±ktÄ± bulunamadÄ±.")
                print("[DEBUG] Ã‡Ä±ktÄ± dizininde warped_*.png dosyasÄ± bulunamadÄ±.")
                return
            output_path = os.path.join(output_dir, warped_files[-1])
            print(f"[DEBUG] Bulunan son Ã§Ä±ktÄ± dosyasÄ±: {output_path}")

        if not os.path.exists(output_path):
            print(f"[ERROR] Ã‡Ä±ktÄ± dosyasÄ± bulunamadÄ±: {output_path}")
            messagebox.showerror("Hata", "Ã‡Ä±ktÄ± dosyasÄ± bulunamadÄ±.")
            return

        # EÄŸer aÃ§Ä±k bir Ã§Ä±ktÄ± penceresi varsa kapat
        if self.output_window is not None and self.output_window.winfo_exists():
            self.output_window.destroy()

        try:
            # Yeni bir pencere oluÅŸtur
            self.output_window = tk.Toplevel(self.root)
            self.output_window.title("Giydirme Sonucu")

            # GÃ¶rÃ¼ntÃ¼yÃ¼ yÃ¼kle
            img = Image.open(output_path)

            # Pencere boyutuna sÄ±ÄŸdÄ±rmak iÃ§in gÃ¶rseli yeniden boyutlandÄ±r (isteÄŸe baÄŸlÄ± Ã§alÄ±ÅŸÄ±r)
            max_size = 800
            width, height = img.size
            if width > max_size or height > max_size:
                if width > height:
                    new_width = max_size
                    new_height = int(height * (max_size / width))
                else:
                    new_height = max_size
                    new_width = int(width * (max_size / height))
                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

            img_tk = ImageTk.PhotoImage(img)

            # GÃ¶rÃ¼ntÃ¼yÃ¼ gÃ¶stermek iÃ§in Label oluÅŸtur
            output_label = ttk.Label(self.output_window, image=img_tk)
            output_label.image = img_tk 
            output_label.pack(padx=10, pady=10)

            self.status_var.set("Ã‡Ä±ktÄ± ayrÄ± pencerede gÃ¶steriliyor.")

        except Exception as e:
            print(f"[ERROR] Ã‡Ä±ktÄ± ayrÄ± pencerede gÃ¶sterilirken hata oluÅŸtu: {str(e)}")
            messagebox.showerror("Hata", f"Ã‡Ä±ktÄ± ayrÄ± pencerede gÃ¶sterilirken bir hata oluÅŸtu: {str(e)}")
            if self.output_window is not None and self.output_window.winfo_exists():
                self.output_window.destroy() # Hata olursa pencereyi kapat

if __name__ == "__main__":
    root = tk.Tk()
    app = VirtualTryOnApp(root)
    root.mainloop()
